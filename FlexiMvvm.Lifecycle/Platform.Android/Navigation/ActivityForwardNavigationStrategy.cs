// =========================================================================
// Copyright 2019 EPAM Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =========================================================================

using System;
using Android.App;
using Android.Content;
using Android.OS;
using FlexiMvvm.ViewModels;
using FlexiMvvm.Views;

namespace FlexiMvvm.Navigation
{
    /// <summary>
    /// Defines the contract for forward navigation to the <see cref="Activity"/>.
    /// </summary>
    /// <param name="sourceView">The <see cref="INavigationView{TViewModel}"/> from which navigation is performed from.</param>
    /// <param name="targetViewIntent">The description of the target <see cref="Activity"/> for navigation.</param>
    /// <param name="requestCode">A unique numeric code generated by the <see cref="INavigationView{TViewModel}.RequestCode"/> property.</param>
    public delegate void ActivityForwardNavigationDelegate(INavigationView<ILifecycleViewModel> sourceView, Intent targetViewIntent, int requestCode);

    /// <summary>
    /// Provides a set of forward navigation strategies for the <see cref="Activity"/>.
    /// </summary>
    public sealed class ActivityForwardNavigationStrategy
    {
        /// <summary>
        /// Forward navigation using the provided <paramref name="strategies"/>. Strategies are executed in the order in which they are passed.
        /// </summary>
        /// <param name="strategies">The strategies to execute during the forward navigation.</param>
        /// <returns>The forward navigation delegate.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="strategies"/> is <see langword="null"/>.</exception>
        public ActivityForwardNavigationDelegate Composite(params ActivityForwardNavigationDelegate[] strategies)
        {
            if (strategies == null)
                throw new ArgumentNullException(nameof(strategies));

            return (sourceView, targetViewIntent, requestCode) =>
            {
                foreach (var strategy in strategies)
                {
                    strategy(sourceView, targetViewIntent, requestCode);
                }
            };
        }

        /// <summary>
        /// Forward navigation using the <see cref="INavigationView{TViewModel}.StartActivity(Intent)"/> method.
        /// </summary>
        /// <returns>The forward navigation delegate.</returns>
        public ActivityForwardNavigationDelegate StartActivity()
        {
            return (sourceView, targetViewIntent, requestCode) =>
            {
                sourceView.StartActivity(targetViewIntent);
            };
        }

        /// <summary>
        /// Forward navigation using the <see cref="INavigationView{TViewModel}.StartActivity(Intent, Bundle?)"/> method.
        /// </summary>
        /// <param name="options">Additional options for how the target <see cref="Activity"/> should be started. Can be <see langword="null"/>.</param>
        /// <returns>The forward navigation delegate.</returns>
        public ActivityForwardNavigationDelegate StartActivity(Bundle? options)
        {
            return (sourceView, targetViewIntent, requestCode) =>
            {
                sourceView.StartActivity(targetViewIntent, options);
            };
        }

        /// <summary>
        /// Forward navigation using the <see cref="INavigationView{TViewModel}.StartActivityForResult(Intent, int)"/> method.
        /// </summary>
        /// <returns>The forward navigation delegate.</returns>
        public ActivityForwardNavigationDelegate StartActivityForResult()
        {
            return (sourceView, targetViewIntent, requestCode) =>
            {
                sourceView.StartActivityForResult(targetViewIntent, requestCode);
            };
        }

        /// <summary>
        /// Forward navigation using the <see cref="INavigationView{TViewModel}.StartActivityForResult(Intent, int, Bundle?)"/> method.
        /// </summary>
        /// <param name="options">Additional options for how the target <see cref="Activity"/> should be started. Can be <see langword="null"/>.</param>
        /// <returns>The forward navigation delegate.</returns>
        public ActivityForwardNavigationDelegate StartActivityForResult(Bundle? options)
        {
            return (sourceView, targetViewIntent, requestCode) =>
            {
                sourceView.StartActivityForResult(targetViewIntent, requestCode, options);
            };
        }
    }
}
